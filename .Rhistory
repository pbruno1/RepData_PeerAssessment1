data<-data.table(read.csv("activity.csv",colClasses=c("integer","Date","integer")))setkey(steps,date,interval)
data<-data.table(read.csv("activity.csv",colClasses=c("integer","Date","integer")))
library(data.table)
data<-data.table(read.csv("activity.csv",colClasses=c("integer","Date","integer")))setkey(steps,date,interval)
data<-data.table(read.csv("activity.csv",colClasses=c("integer","Date","integer")))
setkey(steps,date,interval)
?setkey
key(data)
setkey(data, steps,date,time)
head(data)
data$steps
?tapply
tapply(data,mean)
rawdata<-data.table(read.csv("activity.csv",colClasses=c("integer","Date","integer")))
data<-rawdata[!is.na(rawdata$steps)]
head(data)
tapply(data,mean)
?sapply
?lapply
source(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique(vals)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
ashd
lapply(unique_vals,function(elem)elem[2])
lapply(data,mean)
tapply(data$steps,data$date,mean)
tapply(data$date,data$steps,mean)
tapply(data[,1],data[,2],mean)
tapply(data$date,data$steps,mean)
head(data)
data$steps
data$date
class(data$date)
?setkey
setkey(data,steps,date,time())
setkey(data,steps,date,time
)
setkey(data,date,interval)
key(data)
data
tapply(data$date,data$steps,mean)
tapply(data$steps,data$date,mean)
mean(data$date)
head(data)
summary(data)
data$date[1]+data$date[2]
sum(data$date)
?sum
?Date
rawdata2<-read.csv("activity.csv",head=TRUE,colClasses=c("integer","Date","integer"))
head(rawdata2)
class(rawdata2)
data2<-rawdata[!is.na(rawdata$steps)]
head(data2)
tapply(data2$steps,data2$date,mean)
tapply(data2$steps,data2$date,mean,na.rm=TRUE,simplify=T)
dailysum<-tapply(data2$steps,data2$date,mean,na.rm=TRUE,simplify=T)
dailysum<-tapply(data2$steps,data2$date,sum,na.rm=TRUE,simplify=T)
dailysum
meanbyday<-mean(dailysum)
head(dailysum)
mean(dailysum[2,])
mean(dailysum[,2])
mean(dailysum)
dailysum
print(meanbyday)
?print
print("Mean by Day="meanbyday)
print("Mean by Day=",meanbyday)
?cat
cat("Mean by Day=",meanbyday)
cat("Median by Day=",medianbyday)
medianbyday<-median(dailysum)
cat("Median by Day=",medianbyday)
hist(dailysum)
hist(dailysum,xlab="Daily Steps",ylab="Frequency",main="Histogram of Steps Taken each Day, NA Excluded")
time_avg<-tapply(data2$steps,data2$interval,mean)
?na.rm
?tapply
time_avg
class(time_avg)
time_avg<-tapply(data2$steps,data2$interval,mean,na.rm=TRUE,simplify=T)
dailyfrequency<-data.frame(interval=as.integer(names(time_avg)),avg=time_avg)
with(dailyfrequency,
plot(interval,
avg,
type="l",
xlab="5-minute intervals",
ylab="average steps in the interval across all days"))
plot(dailyfrequency$interval,
dailyfrequency$avg,
type="l",
xlab="5-minute intervals",
ylab="average steps in the interval across all days")
dailyfrequency<-data.frame(interval=as.integer(names(time_avg)),average=time_avg)
plot(dailyfrequency$interval,
dailyfrequency$avg,
type="l",
xlab="5-minute intervals",
ylab="average steps in the interval across all days")
plot(dailyfrequency$interval,
dailyfrequency$average,
type="l",
xlab="5-minute intervals",
ylab="average steps in the interval across all days")
plot(dailyfrequency$interval,
dailyfrequency$average,
type="l",
xlab="5-minute intervals",
ylab="average steps in the interval across all days",main="Average Daily Activity Pattern by Interval")
maxinterval<-max(dailyfrequency$average)
maxinterval
maxinterval<-max(dailyfrequency$average)dailyfrequency[dailyfrequency$average==maxinterval,]
maxinterval<-max(dailyfrequency$average)
dailyfrequency[dailyfrequency$average==maxinterval,]
is.na(rawdata2)
sum(is.na(rawdata2))
imputed<-rawdata2
ndx<-is.na(imputed$steps)
imputed$steps[ndx]<-time_avg[as.character(imputed$interval[ndx])]
sum(is.na(imputed))
class(ndx)
imputeddailysum<-tapply(imputed$steps,imputed$date,sum,na.rm=TRUE,simplify=T)
imputeddailysum
imputedmeanbyday<-mean(imputeddailysum)
cat("Imputed Mean by Day=",imputedmeanbyday)
imputedmedianbyday<-median(imputeddailysum)
cat("Imputed Median by Day=",imputedmedianbyday)
hist(imputeddailysum,xlab="Daily Steps",ylab="Frequency",main="Histogram of Steps Taken each Day, NA Imputed")
is_weekday <- function(d) {
wd <- weekdays(d)
ifelse (wd == "Saturday" | wd == "Sunday", "weekend", "weekday")
}
is_weekday <- function(d) {
weekday <- weekdays(d)
ifelse (weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday")
}
weekdaylist<-sapply(imputed$date,is_weekday)
weekdaylist
class(weekdaylist)
imputed$weekday<- as.factor(weekday)
imputed$weekday<- as.factor(weekdaylist)
weekdayaggregate<-aggregate(steps~weekday+interval,data=imputed,FUN=mean())
weekdayaggregate<-aggregate(steps~weekday+interval,data=imputed,FUN=mean
)
weekdayaggregate
library(lattice)
xyplot(steps ~ interval | factor(weekday),
layout = c(1, 2),
xlab="Interval",
ylab="Number of steps",
type="l",
lty=1,
data=weekdayaggregate)
library(knitr)
?knitr2html
$knitr
?knitr
library(knitr2html)
knitr2html("PA1_template.Rmd")
?"knit2html"
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd","PA1_template.html")
weekdaylist<-sapply(imputed$date,is_weekday)
weekdaylist<-sapply(imputed$date,is_weekday)
## creates a character vector of which days are weekdays or weekends
## creates a character vector of which days are weekdays or weekends
---
---
## Loading and preprocessing the data
## activity.csv must be in your current working directory
## this reads the csv file in as a data frame which we can use for analysis as "rawdata" where the columns are integer, date, and integer formats.
rawdata<-read.csv("activity.csv",head=TRUE,colClasses=c("integer","Date","integer"))
## sets "data" to only have values with no NA for the step value.
data<-rawdata[!is.na(rawdata$steps)]
## What is mean total number of steps taken per day?
## calculating the sum steps taken per day using tapply, stored in "dailysum"
dailysum<-tapply(data$steps,data$date,sum,na.rm=TRUE,simplify=T)
## calculating and reporting the mean and median using their respective functions and the cat function to print
meanbyday<-mean(dailysum)
cat("Mean by Day=",meanbyday)
medianbyday<-median(dailysum)
cat("Median by Day=",medianbyday)
## The mean is 10766 and the median is 10765
## Histogram of daily steps
hist(dailysum,xlab="Daily Steps",ylab="Frequency",main="Histogram of Steps Taken each Day, NA Excluded")
## What is the average daily activity pattern?
## calculating average for each time using tapply
time_avg<-tapply(data$steps,data$interval,mean,na.rm=TRUE,simplify=T)
## creating the daily frequency information in a data frame
dailyfrequency<-data.frame(interval=as.integer(names(time_avg)),average=time_avg)
## plotting the information.
plot(dailyfrequency$interval,
dailyfrequency$average,
type="l",
xlab="5-minute intervals",
ylab="average steps in the interval across all days",main="Average Daily Activity Pattern by Interval")
## calculating time interval with maximum number of steps using the max function
maxinterval<-max(dailyfrequency$average)
dailyfrequency[dailyfrequency$average==maxinterval,]
## the interval 835 has the max steps with 206
## Imputing missing values
## Calculating the number of NAs using the raw data
sum(is.na(rawdata))
## the sum is 2304
## Imputed values will be completed using the average for that 5 minute interval, first we set the imputed data to be equal to the data from the file
imputed<-rawdata
## Then create something to track which values are NA
nas<-is.na(imputed$steps)
## we use the time average already calculated for the previous section to fill in the missing values, using the nas logical values
imputed$steps[nas]<-time_avg[as.character(imputed$interval[nas])]
## sum to ensure we've removed all NAs
sum(is.na(imputed))
## 0 NAs should be reported
## calculating the mean and median as before, using imputed values
imputeddailysum<-tapply(imputed$steps,imputed$date,sum,na.rm=TRUE,simplify=T)
imputedmeanbyday<-mean(imputeddailysum)
cat("Imputed Mean by Day=",imputedmeanbyday)
imputedmedianbyday<-median(imputeddailysum)
cat("Imputed Median by Day=",imputedmedianbyday)
## the imputed mean is 10766 and the imputed median is 10766, the imputed median has gone from 10765.
## creating a historgram from imputed data
hist(imputeddailysum,xlab="Daily Steps",ylab="Frequency",main="Histogram of Steps Taken each Day, NA Imputed")
## there are slight differences in the data, since missing values were replaced by mean values there is a shift towards the mean.
## Are there differences in activity patterns between weekdays and weekends?
## we need to determine whether or not a day is a weekday or weekend. We can set non weekdays to be Weekends The function below determines whether or not a day is a weekday or weekend and labels it accordingly
isweekday <- function(d) {
weekday <- weekdays(d)
ifelse (weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday")
}
## creates a character vector of which days are weekdays or weekends
source(isweekday)
weekdaylist<-sapply(imputed$date,is_weekday)
## creates an additional column headed "weekday" in the imputed values labeling something a weekday or weekend
imputed$weekday<- as.factor(weekdaylist)
## creates aggregate data for the lattice plot using steps, the interval and weekday information
weekdayaggregate<-aggregate(steps~weekday+interval,data=imputed,FUN=mean)
## In order to create a plot using lattice we must first pull it from the library
library(lattice)
## this creates a panel plot using the time series with 5 minute intervals on the x axis and average number of steps on the y axis with each plot headed by either weekend or weekday respectively
xyplot(steps ~ interval | factor(weekday),
layout = c(1, 2),
xlab="Interval",
ylab="Number of steps",
type="l",
lty=1,
data=weekdayaggregate)
?isweekday
View(isweekday)
View(isweekday)
rawdata<-read.csv("activity.csv",head=TRUE,colClasses=c("integer","Date","integer"))
data<-rawdata[!is.na(rawdata$steps)]
data<-rawdata[!is.na(rawdata$steps)]
data<-rawdata[,!is.na(rawdata$steps)]
data<-rawdata[!is.na(rawdata$steps),]
dailysum<-tapply(data$steps,data$date,sum,na.rm=TRUE,simplify=T)
meanbyday<-mean(dailysum)
cat("Mean by Day=",meanbyday)
medianbyday<-median(dailysum)
cat("Median by Day=",medianbyday)
hist(dailysum,xlab="Daily Steps",ylab="Frequency",main="Histogram of Steps Taken each Day, NA Excluded")
time_avg<-tapply(data$steps,data$interval,mean,na.rm=TRUE,simplify=T)
dailyfrequency<-data.frame(interval=as.integer(names(time_avg)),average=time_avg)
plot(dailyfrequency$interval,
dailyfrequency$average,
type="l",
xlab="5-minute intervals",
ylab="average steps in the interval across all days",main="Average Daily Activity Pattern by Interval")
maxinterval<-max(dailyfrequency$average)
dailyfrequency[dailyfrequency$average==maxinterval,]
sum(is.na(rawdata))
imputed<-rawdata
nas<-is.na(imputed$steps)
imputed$steps[nas]<-time_avg[as.character(imputed$interval[nas])]
sum(is.na(imputed))
imputeddailysum<-tapply(imputed$steps,imputed$date,sum,na.rm=TRUE,simplify=T)
imputedmeanbyday<-mean(imputeddailysum)
cat("Imputed Mean by Day=",imputedmeanbyday)
imputedmedianbyday<-median(imputeddailysum)
cat("Imputed Median by Day=",imputedmedianbyday)
hist(imputeddailysum,xlab="Daily Steps",ylab="Frequency",main="Histogram of Steps Taken each Day, NA Imputed")
isweekday <- function(d) {
weekday <- weekdays(d)
ifelse (weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday")
}
weekdaylist<-sapply(imputed$date,is_weekday)
source(is_weekday)
weekdaylist<-sapply(imputed$date,isweekday)
imputed$weekday<- as.factor(weekdaylist)
weekdayaggregate<-aggregate(steps~weekday+interval,data=imputed,FUN=mean)
library(lattice)
xyplot(steps ~ interval | factor(weekday),
layout = c(1, 2),
xlab="Interval",
ylab="Number of steps",
type="l",
lty=1,
data=weekdayaggregate)
## In order to create a plot using lattice we must first pull it from the library
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
## activity.csv must be in your current working directory
## this reads the csv file in as a data frame which we can use for analysis as "rawdata" where the columns are integer, date, and integer formats.
rawdata<-read.csv("activity.csv",head=TRUE,colClasses=c("integer","Date","integer"))
## sets "data" to only have values with no NA for the step value.
data<-rawdata[!is.na(rawdata$steps),]
rawdata<-read.csv("activity.csv",head=TRUE,colClasses=c("integer","Date","integer"))
## sets "data" to only have values with no NA for the step value.
data<-rawdata[!is.na(rawdata$steps),]
## What is mean total number of steps taken per day?
## calculating the sum steps taken per day using tapply, stored in "dailysum"
dailysum<-tapply(data$steps,data$date,sum,na.rm=TRUE,simplify=T)
## calculating and reporting the mean and median using their respective functions and the cat function to print
meanbyday<-mean(dailysum)
cat("Mean by Day=",meanbyday)
medianbyday<-median(dailysum)
cat("Median by Day=",medianbyday)
## The mean is 10766 and the median is 10765
## Histogram of daily steps
hist(dailysum,xlab="Daily Steps",ylab="Frequency",main="Histogram of Steps Taken each Day, NA Excluded")
## What is the average daily activity pattern?
## calculating average for each time using tapply
time_avg<-tapply(data$steps,data$interval,mean,na.rm=TRUE,simplify=T)
## creating the daily frequency information in a data frame
dailyfrequency<-data.frame(interval=as.integer(names(time_avg)),average=time_avg)
## plotting the information.
plot(dailyfrequency$interval,
dailyfrequency$average,
type="l",
xlab="5-minute intervals",
ylab="average steps in the interval across all days",main="Average Daily Activity Pattern by Interval")
## calculating time interval with maximum number of steps using the max function
maxinterval<-max(dailyfrequency$average)
dailyfrequency[dailyfrequency$average==maxinterval,]
## the interval 835 has the max steps with 206
## Imputing missing values
## Calculating the number of NAs using the raw data
sum(is.na(rawdata))
## the sum is 2304
## Imputed values will be completed using the average for that 5 minute interval, first we set the imputed data to be equal to the data from the file
imputed<-rawdata
## Then create something to track which values are NA
nas<-is.na(imputed$steps)
## we use the time average already calculated for the previous section to fill in the missing values, using the nas logical values
imputed$steps[nas]<-time_avg[as.character(imputed$interval[nas])]
## sum to ensure we've removed all NAs
sum(is.na(imputed))
## 0 NAs should be reported
## calculating the mean and median as before, using imputed values
imputeddailysum<-tapply(imputed$steps,imputed$date,sum,na.rm=TRUE,simplify=T)
imputedmeanbyday<-mean(imputeddailysum)
cat("Imputed Mean by Day=",imputedmeanbyday)
imputedmedianbyday<-median(imputeddailysum)
cat("Imputed Median by Day=",imputedmedianbyday)
## the imputed mean is 10766 and the imputed median is 10766, the imputed median has gone from 10765.
## creating a historgram from imputed data
hist(imputeddailysum,xlab="Daily Steps",ylab="Frequency",main="Histogram of Steps Taken each Day, NA Imputed")
## there are slight differences in the data, since missing values were replaced by mean values there is a shift towards the mean.
## Are there differences in activity patterns between weekdays and weekends?
## we need to determine whether or not a day is a weekday or weekend. We can set non weekdays to be Weekends The function below determines whether or not a day is a weekday or weekend and labels it accordingly
isweekday <- function(d) {
weekday <- weekdays(d)
ifelse (weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday")
}
## creates a character vector of which days are weekdays or weekends
weekdaylist<-sapply(imputed$date,isweekday)
## creates an additional column headed "weekday" in the imputed values labeling something a weekday or weekend
imputed$weekday<- as.factor(weekdaylist)
## creates aggregate data for the lattice plot using steps, the interval and weekday information
weekdayaggregate<-aggregate(steps~weekday+interval,data=imputed,FUN=mean)
## In order to create a plot using lattice we must first pull it from the library
library(lattice)
## this creates a panel plot using the time series with 5 minute intervals on the x axis and average number of steps on the y axis with each plot headed by either weekend or weekday respectively
xyplot(steps ~ interval | factor(weekday),
layout = c(1, 2),
xlab="Interval",
ylab="Number of steps",
type="l",
lty=1,
data=weekdayaggregate)
source(knitr)
library(knitr)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
